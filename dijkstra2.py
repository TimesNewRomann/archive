
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PointStamped
from std_msgs.msg import Header
import heapq

def dijkstra(graph, start, end):
    # 그래프의 모든 노드에 대해 초기값을 무한대로 설정하고 시작 노드는 0으로 설정
    distances = {node: float('inf') for node in graph}
    distances[start] = 0

    # 각 노드까지의 최단 경로를 저장하는 딕셔너리
    previous_nodes = {}

    # 우선순위 큐를 사용하여 방문할 노드 관리
    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        # 현재 노드가 이미 더 짧은 경로로 방문된 경우 건너뛴다
        if current_distance > distances[current_node]:
            continue

        # 현재 노드에 인접한 노드들을 탐색한다
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight

            # 새로 계산된 거리가 기존의 거리보다 짧은 경우 업데이트한다.
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                previous_nodes[neighbor] = current_node
                heapq.heappush(priority_queue, (distance, neighbor))

    # 경로 추적
    path = []
    current = end
    while current in previous_nodes:
        path.insert(0, current)
        current = previous_nodes[current]
    path.insert(0, start)

    return path

# 그래프와 시작 노드, 목적지 노드 설정
graph = {
    # '154': {'55': 1},
    # '55': {'129': 1},
    # '129': {'61': 1},
    # '61': {'135': 1},
    # '135': {'139': 1},
    # '139': {'144': 1},
    # '144': {'16': 2, '17' : 1},
    # '16': {},
    # '17': {'203': 1},
    # '203': {'204': 1},
    # '204': {'205': 1},
    # '205': {'39': 1},
    # '39': {'216': 1},
    # '216': {'147': 1},
    # '147': {'149': 1},
    # '149': {'151': 1},
    # '151': {'153': 1},
    # '153': {}
    1 : {85: 0, 84: 0},
    2 : {98: 0, 3: 0},
    3 : {97: 0, 46: 0, 2: 0},
    4 : {96: 0},
    5 : {80: 0},
    6 : {94: 0},
    7 : {8: 0, 195: 0},
    8 : {6: 0},
    9 : {248: 0, 155: 0},
    10 : {40: 0},
    11 : {188: 0},
    12 : {196: 0},
    13 : {210: 0},
    14 : {195: 0},
    15 : {142: 0},
    16 : {201: 0},
    17 : {203: 0},
    18 : {180: 0},
    19 : {182: 0},
    20 : {175: 0},
    21 : {244: 0, 245: 0, 247: 0},
    22 : {246: 0, 244: 0},
    23 : {187: 0, 24: 0, 246: 0},
    24 : {179: 0, 23: 0},
    25 : {21: 0, 247: 0},
    26 : {243: 0},
    27 : {},
    28 : {239: 0},
    29 : {242: 0},
    30 : {},
    31 : {30: 0, 232: 0},
    32 : {34: 0},
    33 : {77: 0, 34: 0},
    34 : {78: 0, 33: 0},
    35 : {13: 0, 36: 0},
    36 : {194: 0, 209: 0, 35: 0},
    37 : {35: 0, 38: 0},
    38 : {36: 0, 37: 0},
    39 : {216: 0, 40: 0},
    40 : {217: 0, 39: 0},
    41 : {108: 0},
    42 : {107: 0, 113: 0},
    43 : {110: 0},
    44 : {106: 0, 114: 0},
    45 : {157: 0},
    46 : {82: 0},
    47 : {99: 0, 48: 0},
    48 : {100: 0, 47: 0},
    49 : {112: 0},
    50 : {112: 0},
    51 : {},
    52 : {},
    53 : {115: 0},
    54 : {124: 0},
    55 : {129: 0, 124: 0},
    56 : {119: 0},
    57 : {122: 0},
    58 : {55: 0},
    59 : {112: 0},
    60 : {134: 0, 62: 0, 61: 0},
    61 : {135: 0, 60: 0},
    62 : {140: 0, 134: 0},
    63 : {234: 0},
    64 : {26: 0, 233: 0, 241: 0},
    65 : {79: 0},
    66 : {236: 0},
    67 : {118: 0, 68: 0},
    68 : {123: 0, 120: 0, 67: 0},
    69 : {228: 0, 70: 0},
    70 : {231: 0, 69: 0},
    71 : {75: 0, 72: 0},
    72 : {76: 0, 71: 0},
    73 : {67: 0, 74: 0},
    74 : {68: 0, 73: 0},
    75 : {73: 0, 76: 0},
    76 : {74: 0, 75: 0},
    77 : {69: 0, 78: 0},
    78 : {70: 0, 77: 0},
    79 : {1: 0},
    80 : {66: 0},
    81 : {19: 0, 172: 0},
    82 : {83: 0},
    83 : {159: 0},
    84 : {88: 0, 85: 0},
    85 : {89: 0, 84: 0},
    86 : {5: 0, 87: 0},
    87 : {5: 0, 86: 0},
    88 : {2: 0, 89: 0},
    89 : {3: 0, 88: 0},
    90 : {86: 0, 91: 0},
    91 : {87: 0, 90: 0},
    92 : {90: 0, 93: 0},
    93 : {91: 0, 92: 0},
    94 : {93: 0},
    95 : {6: 0},
    96 : {92: 0},
    97 : {47: 0, 98: 0},
    98 : {48: 0, 97: 0},
    99 : {130: 0, 100: 0},
    100 : {104: 0, 99: 0},
    101 : {4: 0},
    102 : {45: 0},
    103 : {113: 0, 104: 0},
    104 : {42: 0, 103: 0},
    105 : {101: 0, 106: 0},
    106 : {102: 0, 105: 0},
    107 : {41: 0},
    108 : {109: 0},
    109 : {121: 0, 125: 0},
    110 : {114: 0, 44: 0},
    111 : {43: 0},
    112 : {111: 0},
    113 : {107: 0, 42: 0},
    114 : {105: 0, 44: 0},
    115 : {126: 0},
    116 : {59: 0},
    117 : {116: 0},
    118 : {56: 0},
    119 : {},
    120 : {58: 0},
    121 : {57: 0},
    122 : {124: 0},
    123 : {50: 0},
    124 : {127: 0, 55: 0},
    125 : {51: 0},
    126 : {130: 0},
    127 : {60: 0, 129: 0},
    128 : {9: 0},
    129 : {61: 0, 127: 0},
    130 : {132: 0},
    131 : {128: 0},
    132 : {136: 0},
    133 : {131: 0},
    134 : {138: 0, 62: 0, 135: 0},
    135 : {139: 0, 134: 0},
    136 : {141: 0},
    137 : {133: 0},
    138 : {143: 0, 140: 0, 139: 0},
    139 : {144: 0, 138: 0},
    140 : {145: 0, 138: 0},
    141 : {192: 0},
    142 : {137: 0},
    143 : {12: 0, 145: 0, 144: 0},
    144 : {16: 0, 17: 0, 143: 0},
    145 : {171: 0, 143: 0},
    146 : {148: 0, 147: 0},
    147 : {149: 0, 146: 0},
    148 : {150: 0, 149: 0},
    149 : {151: 0, 148: 0},
    150 : {152: 0, 151: 0},
    151 : {153: 0, 150: 0},
    152 : {71: 0, 153: 0},
    153 : {72: 0, 152: 0},
    154 : {55: 0},
    155 : {49: 0},
    156 : {161: 0},
    157 : {158: 0},
    158 : {18: 0},
    159 : {81: 0},
    160 : {92: 0},
    161 : {160: 0},
    162 : {163: 0, 188: 0},
    163 : {167: 0},
    164 : {162: 0},
    165 : {164: 0},
    166 : {165: 0},
    167 : {95: 0},
    168 : {7: 0},
    169 : {168: 0},
    170 : {169: 0},
    171 : {170: 0},
    172 : {173: 0},
    173 : {20: 0},
    174 : {198: 0},
    175 : {174: 0},
    176 : {10: 0},
    177 : {176: 0},
    178 : {177: 0},
    179 : {178: 0},
    180 : {181: 0},
    181 : {39: 0},
    182 : {183: 0},
    183 : {40: 0, 205: 0},
    184 : {142: 0},
    185 : {184: 0},
    186 : {185: 0},
    187 : {186: 0},
    188 : {189: 0, 162: 0},
    189 : {156: 0},
    190 : {11: 0},
    191 : {190: 0},
    192 : {191: 0},
    193 : {14: 0},
    194 : {193: 0},
    195 : {156: 0, 7: 0},
    196 : {197: 0},
    197 : {198: 0},
    198 : {199: 0, 213: 0},
    199 : {200: 0, 214: 0},
    200 : {31: 0},
    201 : {202: 0},
    202 : {212: 0},
    203 : {204: 0},
    204 : {205: 0},
    205 : {39: 0, 183: 0},
    206 : {15: 0},
    207 : {206: 0},
    208 : {207: 0},
    209 : {208: 0},
    210 : {211: 0},
    211 : {212: 0},
    212 : {213: 0, 198: 0},
    213 : {214: 0, 199: 0},
    214 : {215: 0, 200: 0},
    215 : {31: 0, 200: 0},
    216 : {147: 0, 217: 0},
    217 : {146: 0, 216: 0},
    218 : {37: 0},
    219 : {38: 0},
    220 : {146: 0, 221: 0},
    221 : {147: 0, 220: 0},
    222 : {226: 0, 223: 0},
    223 : {229: 0, 222: 0},
    224 : {220: 0, 225: 0},
    225 : {221: 0, 224: 0},
    226 : {224: 0, 229: 0},
    227 : {222: 0, 230: 0},
    228 : {227: 0, 231: 0},
    229 : {225: 0, 218: 0, 226: 0},
    230 : {223: 0, 227: 0},
    231 : {230: 0, 228: 0},
    232 : {32: 0},
    233 : {27: 0},
    234 : {65: 0},
    235 : {63: 0},
    236 : {64: 0},
    237 : {235: 0},
    238 : {28: 0},
    239 : {33: 0},
    240 : {242: 0},
    241 : {240: 0},
    242 : {25: 0},
    243 : {34: 0},
    244 : {23: 0, 245: 0, 22: 0},
    245 : {24: 0, 244: 0},
    246 : {166: 0, 23: 0},
    247 : {22: 0, 21: 0},
    248 : {52: 0}
}
start_node = '17' # 시작노드. 외부에서 실시간으로 받아온 현재 위치(노드)를 넣으면, 현재 위치부터 목적노드까지의 경로를 계속 생성해 줄 수 있다.
end_node = '153' # 목표 노드

# 최단 경로 찾기
shortest_path = dijkstra(graph, start_node, end_node)
print("Shortest path:", shortest_path) # 전체 경로 리스트
print("Oncoming_node:", shortest_path[1:4]) # 앞 3노드
#포인트스템프드 형식에 넣어서 데이터를 퍼블리시하는 코드 구현해보기
